{
  "contract_name": "IndexOracle",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "basket",
      "deviation_threshold",
      "router",
      "symbol",
      "target",
      "when_stale"
    ],
    "properties": {
      "basket": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Decimal256"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "deviation_threshold": {
        "$ref": "#/definitions/Decimal256"
      },
      "router": {
        "$ref": "#/definitions/RawContract"
      },
      "symbol": {
        "type": "string"
      },
      "target": {
        "$ref": "#/definitions/Uint256"
      },
      "when_stale": {
        "$ref": "#/definitions/Uint64"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal256": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
        "type": "string"
      },
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint256": {
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "compute_index"
        ],
        "properties": {
          "compute_index": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "$ref": "#/definitions/AdminMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AdminMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_status"
            ],
            "properties": {
              "update_status": {
                "$ref": "#/definitions/ContractStatus"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "To remove assets that have been added, set the initial weight to be 0. All other weight values will cause the corresponding asset to be added or changed. Assets not included in the mod list will remain in the oracle until removed.\n\nVec<(Symbol, Weight)> where Symbol is string and Weight is Decimal256",
            "type": "object",
            "required": [
              "mod_basket"
            ],
            "properties": {
              "mod_basket": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Decimal256"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "deviation_threshold": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Decimal256"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "router": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/RawContract"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "symbol": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "when_stale": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint64"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_target"
            ],
            "properties": {
              "update_target": {
                "$ref": "#/definitions/Uint256"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "unfreeze_peg"
            ],
            "properties": {
              "unfreeze_peg": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ContractStatus": {
        "description": "Normal - all operations allowed except migrations\n\nDeprecated - only time migrations are allowed, other permitted operations TBD by target\n\nFrozen - only status change allowed",
        "type": "string",
        "enum": [
          "normal",
          "deprecated",
          "frozen"
        ]
      },
      "Decimal256": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
        "type": "string"
      },
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint256": {
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_price"
        ],
        "properties": {
          "get_price": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_prices"
        ],
        "properties": {
          "get_prices": {
            "type": "object",
            "required": [
              "keys"
            ],
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_index_data"
        ],
        "properties": {
          "get_index_data": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_basket"
        ],
        "properties": {
          "get_basket": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_basket": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BasketResponse",
      "type": "object",
      "required": [
        "basket"
      ],
      "properties": {
        "basket": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Decimal256"
              },
              {
                "$ref": "#/definitions/Decimal256"
              }
            ],
            "maxItems": 3,
            "minItems": 3
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal256": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "get_index_data": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IndexDataResponse",
      "type": "object",
      "required": [
        "basket",
        "peg",
        "router",
        "symbol",
        "when_stale"
      ],
      "properties": {
        "basket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexAsset"
          }
        },
        "peg": {
          "$ref": "#/definitions/Peg"
        },
        "router": {
          "$ref": "#/definitions/Contract"
        },
        "symbol": {
          "type": "string"
        },
        "when_stale": {
          "$ref": "#/definitions/Uint64"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetWeights": {
          "description": "The initial weight and computed fixed weight of an asset.",
          "type": "object",
          "required": [
            "fixed",
            "initial"
          ],
          "properties": {
            "fixed": {
              "description": "Fixed weight of the asset with respect to its value and percentage of peg",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal256"
                }
              ]
            },
            "initial": {
              "description": "Initial weight of the asset (out of 100%)",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal256"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Contract": {
          "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
          "type": "object",
          "required": [
            "address",
            "code_hash"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "code_hash": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Decimal256": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
          "type": "string"
        },
        "IndexAsset": {
          "type": "object",
          "required": [
            "symbol",
            "weight"
          ],
          "properties": {
            "symbol": {
              "type": "string"
            },
            "weight": {
              "$ref": "#/definitions/AssetWeights"
            }
          },
          "additionalProperties": false
        },
        "Peg": {
          "description": "The peg of the basket token",
          "type": "object",
          "required": [
            "frozen",
            "last_updated",
            "last_value",
            "target",
            "value"
          ],
          "properties": {
            "frozen": {
              "description": "Whether or not this value is frozen",
              "type": "boolean"
            },
            "last_updated": {
              "description": "When this value was last updated (in seconds)",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint64"
                }
              ]
            },
            "last_value": {
              "description": "Last peg price of the index asset",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "target": {
              "description": "Target value of the peg",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            },
            "value": {
              "description": "Peg price of the index asset",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint256"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OraclePrice",
      "type": "object",
      "required": [
        "data",
        "key"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ReferenceData"
        },
        "key": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "get_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_OraclePrice",
      "type": "array",
      "items": {
        "$ref": "#/definitions/OraclePrice"
      },
      "definitions": {
        "OraclePrice": {
          "type": "object",
          "required": [
            "data",
            "key"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ReferenceData"
            },
            "key": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    }
  }
}