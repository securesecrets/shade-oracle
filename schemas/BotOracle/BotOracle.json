{
  "contract_name": "BotOracle",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "router"
    ],
    "properties": {
      "router": {
        "$ref": "#/definitions/RawContract"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "set_rates"
        ],
        "properties": {
          "set_rates": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RawRateData"
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_rates"
        ],
        "properties": {
          "remove_rates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "$ref": "#/definitions/RawContract"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_rates"
        ],
        "properties": {
          "update_rates": {
            "$ref": "#/definitions/RateDataUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_status"
        ],
        "properties": {
          "set_status": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Decimal256": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
        "type": "string"
      },
      "RateDataConfigUpdate": {
        "type": "object",
        "properties": {
          "max_change": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal256"
              },
              {
                "type": "null"
              }
            ]
          },
          "timeout": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "RateDataUpdate": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "rates"
            ],
            "properties": {
              "rates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Decimal256"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "config"
            ],
            "properties": {
              "config": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/RateDataConfigUpdate"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RawRateData": {
        "type": "object",
        "required": [
          "initial_rate",
          "key",
          "max_change",
          "permission",
          "timeout"
        ],
        "properties": {
          "initial_rate": {
            "description": "Some initial rate.",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal256"
              }
            ]
          },
          "key": {
            "description": "The key for this rate.",
            "type": "string"
          },
          "max_change": {
            "description": "The maximum % change allowed for this rate per update.",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal256"
              }
            ]
          },
          "permission": {
            "description": "Permission required to update this rate.",
            "type": "string"
          },
          "timeout": {
            "description": "When this rate should be considered stale.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_price"
        ],
        "properties": {
          "get_price": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_prices"
        ],
        "properties": {
          "get_prices": {
            "type": "object",
            "required": [
              "keys"
            ],
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_rates"
        ],
        "properties": {
          "get_rates": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CommonConfigResponse",
      "type": "object",
      "required": [
        "config",
        "supported_keys"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/CommonConfig"
        },
        "supported_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CommonConfig": {
          "type": "object",
          "required": [
            "enabled",
            "router"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "router": {
              "$ref": "#/definitions/Contract"
            }
          },
          "additionalProperties": false
        },
        "Contract": {
          "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
          "type": "object",
          "required": [
            "address",
            "code_hash"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "code_hash": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OraclePrice",
      "type": "object",
      "required": [
        "data",
        "key"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ReferenceData"
        },
        "key": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "get_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_OraclePrice",
      "type": "array",
      "items": {
        "$ref": "#/definitions/OraclePrice"
      },
      "definitions": {
        "OraclePrice": {
          "type": "object",
          "required": [
            "data",
            "key"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ReferenceData"
            },
            "key": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "get_rates": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_RateData",
      "type": "array",
      "items": {
        "$ref": "#/definitions/RateData"
      },
      "definitions": {
        "Decimal256": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
          "type": "string"
        },
        "RateData": {
          "type": "object",
          "required": [
            "key",
            "last_updated",
            "max_change",
            "permission",
            "rate",
            "timeout"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "last_updated": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_change": {
              "$ref": "#/definitions/Decimal256"
            },
            "permission": {
              "type": "string"
            },
            "rate": {
              "$ref": "#/definitions/Decimal256"
            },
            "timeout": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}