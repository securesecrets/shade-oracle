{
  "contract_name": "siennaswap-lp-oracle",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Oracle1 - contract for an oracle of asset 1\n\nOracle2 - contract for an oracle of asset 2\n\nFactory - contract that mints the LP token for asset 1 & asset 2 (SecretSwap - Pair | SiennaSwap - Exchange)",
    "type": "object",
    "required": [
      "config",
      "exchange",
      "symbol_0",
      "symbol_1"
    ],
    "properties": {
      "config": {
        "$ref": "#/definitions/InstantiateCommonConfig"
      },
      "exchange": {
        "$ref": "#/definitions/RawContract"
      },
      "symbol_0": {
        "type": "string"
      },
      "symbol_1": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "InstantiateCommonConfig": {
        "description": "Config object passed into the instantiation of an oracle.\n\nsupported_keys - (keys which are allowed by oracle, if none listed, then oracle will support all keys).\n\nrouter - oracle router\n\nenabled - can we use this oracle?\n\nonly_band - will this oracle go directly to band rather than through the router?",
        "type": "object",
        "required": [
          "enabled",
          "only_band",
          "router"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "only_band": {
            "type": "boolean"
          },
          "router": {
            "$ref": "#/definitions/RawContract"
          },
          "supported_keys": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "updates"
            ],
            "properties": {
              "updates": {
                "$ref": "#/definitions/ConfigUpdates"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ConfigUpdates": {
        "description": "Config object passed into the updating of an oracle's common config.\n\nsupported_keys - (keys which are allowed by oracle, if none listed, then oracle will support all keys).\n\nrouter - oracle router\n\nenabled - can we use this oracle?\n\nonly_band - will this oracle go directly to band rather than through the router?",
        "type": "object",
        "properties": {
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "only_band": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "router": {
            "anyOf": [
              {
                "$ref": "#/definitions/RawContract"
              },
              {
                "type": "null"
              }
            ]
          },
          "supported_keys": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Default Query API for all oracles.\n\nEvery oracle must support these 3 methods in addition to any specific ones it wants to support.",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_price"
        ],
        "properties": {
          "get_price": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_prices"
        ],
        "properties": {
          "get_prices": {
            "type": "object",
            "required": [
              "keys"
            ],
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/CommonConfig"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CommonConfig": {
          "description": "Config object stored in all oracles.\n\nsupported_keys - (keys which are allowed by oracle, if none listed, then oracle will support all keys).\n\nrouter - oracle router\n\nenabled - can we use this oracle?\n\nonly_band - will this oracle go directly to band rather than through the router?",
          "type": "object",
          "required": [
            "enabled",
            "only_band",
            "router",
            "supported_keys"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "only_band": {
              "type": "boolean"
            },
            "router": {
              "$ref": "#/definitions/Contract"
            },
            "supported_keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "Contract": {
          "type": "object",
          "required": [
            "address",
            "code_hash"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "code_hash": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PriceResponse",
      "type": "object",
      "required": [
        "price"
      ],
      "properties": {
        "price": {
          "$ref": "#/definitions/OraclePrice"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "OraclePrice": {
          "type": "object",
          "required": [
            "data",
            "key"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ReferenceData"
            },
            "key": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PricesResponse",
      "type": "object",
      "required": [
        "prices"
      ],
      "properties": {
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OraclePrice"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "OraclePrice": {
          "type": "object",
          "required": [
            "data",
            "key"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ReferenceData"
            },
            "key": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
