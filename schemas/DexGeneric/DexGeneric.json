{
  "contract_name": "DexGeneric",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "router"
    ],
    "properties": {
      "router": {
        "$ref": "#/definitions/RawContract"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "set_pairs"
        ],
        "properties": {
          "set_pairs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RawPairData"
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_pairs"
        ],
        "properties": {
          "remove_pairs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_assets"
        ],
        "properties": {
          "update_assets": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RawAsset"
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "$ref": "#/definitions/RawContract"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_status"
        ],
        "properties": {
          "set_status": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "RawAsset": {
        "type": "object",
        "required": [
          "contract",
          "quote_symbol"
        ],
        "properties": {
          "contract": {
            "$ref": "#/definitions/RawContract"
          },
          "quote_symbol": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RawContract": {
        "description": "A contract that does not contain a validated address. Should be accepted as user input because we shouldn't assume addresses are verified Addrs. https://docs.rs/cosmwasm-std/latest/cosmwasm_std/struct.Addr.html",
        "type": "object",
        "required": [
          "address",
          "code_hash"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "code_hash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RawPairData": {
        "description": "If this is a market LP oracle with the pair being ETH/USDT and we want this to be an oracle for ETH:\n\n- Base token: USDT contract with the router symbol corresponding to the USDT price. - Target token: ETH contract with router symbol corresponding to the ETH price. - Key: the oracle key supported by this pair (ex: \"ETH (ShadeSwap ETH/USDT LP)\").",
        "type": "object",
        "required": [
          "base_token",
          "key",
          "pair",
          "target_token"
        ],
        "properties": {
          "base_token": {
            "$ref": "#/definitions/RawAsset"
          },
          "key": {
            "type": "string"
          },
          "pair": {
            "$ref": "#/definitions/RawContract"
          },
          "target_token": {
            "$ref": "#/definitions/RawAsset"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_price"
        ],
        "properties": {
          "get_price": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_prices"
        ],
        "properties": {
          "get_prices": {
            "type": "object",
            "required": [
              "keys"
            ],
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_pairs"
        ],
        "properties": {
          "get_pairs": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CommonConfigResponse",
      "type": "object",
      "required": [
        "config",
        "supported_keys"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/CommonConfig"
        },
        "supported_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CommonConfig": {
          "type": "object",
          "required": [
            "enabled",
            "router"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "router": {
              "$ref": "#/definitions/Contract"
            }
          },
          "additionalProperties": false
        },
        "Contract": {
          "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
          "type": "object",
          "required": [
            "address",
            "code_hash"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "code_hash": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_pairs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_PairData",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PairData"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "type": "object",
          "required": [
            "contract",
            "decimals",
            "quote_symbol"
          ],
          "properties": {
            "contract": {
              "$ref": "#/definitions/Contract"
            },
            "decimals": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "quote_symbol": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Contract": {
          "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
          "type": "object",
          "required": [
            "address",
            "code_hash"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "code_hash": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "PairData": {
          "type": "object",
          "required": [
            "base_token",
            "key",
            "pair",
            "target_token"
          ],
          "properties": {
            "base_token": {
              "$ref": "#/definitions/Asset"
            },
            "key": {
              "type": "string"
            },
            "pair": {
              "$ref": "#/definitions/Contract"
            },
            "target_token": {
              "$ref": "#/definitions/Asset"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OraclePrice",
      "type": "object",
      "required": [
        "data",
        "key"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/ReferenceData"
        },
        "key": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "get_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_OraclePrice",
      "type": "array",
      "items": {
        "$ref": "#/definitions/OraclePrice"
      },
      "definitions": {
        "OraclePrice": {
          "type": "object",
          "required": [
            "data",
            "key"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/ReferenceData"
            },
            "key": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ReferenceData": {
          "type": "object",
          "required": [
            "last_updated_base",
            "last_updated_quote",
            "rate"
          ],
          "properties": {
            "last_updated_base": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_updated_quote": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "rate": {
              "$ref": "#/definitions/Uint256"
            }
          },
          "additionalProperties": false
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    }
  }
}